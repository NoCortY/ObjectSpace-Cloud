<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.objectspace.componentcenter.dao.ComponentDao">
    <!--开启本mapper的namespace下的二级缓存-->
    <!--
        eviction:代表的是缓存回收策略，目前MyBatis提供以下策略。
        (1) LRU,最近最少使用的，一处最长时间不用的对象
        (2) FIFO,先进先出，按对象进入缓存的顺序来移除他们
        (3) SOFT,软引用，移除基于垃圾回收器状态和软引用规则的对象
        (4) WEAK,弱引用，更积极的移除基于垃圾收集器状态和弱引用规则的对象。
        	这里采用的是LRU，  移除最长时间不用的对形象

        flushInterval:刷新间隔时间，单位为毫秒，如果你不配置它，那么当
        SQL被执行的时候才会去刷新缓存。

        size:引用数目，一个正整数，代表缓存最多可以存储多少个对象，不宜设置过大。设置过大会导致内存溢出。
        这里配置的是1024个对象

        readOnly:只读，意味着缓存数据只能读取而不能修改，这样设置的好处是我们可以快速读取缓存，缺点是我们没有
        办法修改缓存，他的默认值是false，不允许我们修改
    -->
    <!--<cache eviction="LRU" type="cn.objectspace.common.cache.MyBatisCache"/>-->
    <resultMap id="ServerDetailDto" type="ServerDetailDto">
        <id column="ip" property="ip"/>
        <result column="computer_name" property="computerName"/>
        <result column="os_name" property="osName"/>
        <result column="os_version" property="osVersion"/>
        <result column="os_arch" property="osArch"/>
        <result column="mem_total" property="memTotal"/>
        <result column="swap_total" property="swapTotal"/>
        <collection property="cpuDetailDtos" ofType="CpuDetailDto">
            <id column="cpu_id" property="cpuId"/>
            <result column="frequency" property="frequency"/>
            <result column="vendor" property="vendor"/>
            <result column="model" property="model"/>
        </collection>
        <collection property="diskDetailDtos" ofType="DiskDetailDto">
            <id column="disk_name" property="diskName"/>
            <result column="disk_type" property="diskType"/>
            <result column="total" property="total"/>
        </collection>
        <collection property="netDetailDtos" ofType="NetDetailDto">
            <id column="net_name" property="netName"/>
            <result column="net_ip" property="netIp"/>
            <result column="net_mask" property="netMask"/>
        </collection>
    </resultMap>
    <resultMap id="cpuRecordGroupDto" type="CpuRecordGroupDto">
        <id column="cpu_id" property="cpuId"/>
        <collection property="cpuRecordDtoList" ofType="CpuRecordDto">
            <id column="record_time" property="recordTime"/>
            <result column="user_used" property="userUsed"/>
            <result column="system_used" property="systemUsed"/>
            <result column="combine" property="combine"/>
        </collection>
    </resultMap>
    <resultMap id="diskRecordGroupDto" type="DiskRecordGroupDto">
        <id column="disk_name" property="diskName"/>
        <collection property="diskRecordDtoList" ofType="DiskRecordDto">
            <id column="record_time" property="recordTime"/>
            <result column="read_rate" property="readRate"/>
            <result column="write_rate" property="writeRate"/>
        </collection>
    </resultMap>
    <resultMap id="NetRecordGroupDto" type="NetRecordGroupDto">
        <id column="net_name" property="netName"/>
        <collection property="netRecordDtoList" ofType="NetRecordDto">
            <id column="record_time" property="recordTime"/>
            <result column="rx_rate" property="rxRate"/>
            <result column="tx_rate" property="txRate"/>
        </collection>
    </resultMap>
    <select id="queryServerRuntimeRecords" parameterType="java.lang.Integer" resultType="ServerRuntimeRecordDto">
        SELECT server_ip,user_email,server_state,record_time,record_content
        FROM server_runtime_record
        WHERE user_id=#{userId}
    </select>
    <insert id="insertServerRuntimeRecord" parameterType="ServerRuntimeRecord">
        INSERT INTO server_runtime_record
        <trim prefix="(" suffix=")" suffixOverrides=",">
            server_ip,user_id,
            <if test="userEmail!=null and userEmail!=''">
                user_email,
            </if>
            server_state,
            record_time,
            <if test="recordContent!=null and recordContent!=''">
                record_content
            </if>
        </trim>
        VALUES
        <trim prefix="(" suffix=")" suffixOverrides=",">
            #{serverIp},#{userId},
            <if test="userEmail!=null and userEmail!=''">
                #{userEmail},
            </if>
            #{serverState},
            #{recordTime},
            <if test="recordContent!=null and recordContent!=''">
                #{recordContent}
            </if>
        </trim>
    </insert>
    <delete id="deleteSimpleCommandById" parameterType="java.lang.Integer">
        DELETE FROM
        simple_command
        WHERE id = #{id} and create_user_id = #{userId}
    </delete>
    <insert id="insertSimpleCommand" parameterType="SimpleCommand">
        INSERT INTO simple_command(command_name,command_content,create_user_id,create_user_email,create_user_name)
        VALUES(#{commandName},#{commandContent},#{createUserId},#{createUserEmail},#{createUserName})
    </insert>
    <select id="querySimpleCommandList" parameterType="java.lang.Integer" resultType="SimpleCommandDto">
        SELECT id,command_name,command_content,create_user_name FROM simple_command WHERE create_user_id=#{userId}
    </select>
    <select id="queryServerCommandExecuteRecordByUserId" resultType="CloudServerCommandExecuteRecordDto"
            parameterType="java.lang.Integer">
        SELECT
        server_ip,command,result,execute_user_name,execute_date
        FROM
        cloud_server_command_execute_record
        WHERE
        execute_user_id = #{userId}
        ORDER BY
        execute_date DESC
    </select>
    <insert id="insertExecuteCommandRecord">
        INSERT INTO
        cloud_server_command_execute_record(server_ip,command,result,execute_user_id,execute_user_email,execute_user_name,execute_date)
        VALUES
        <foreach collection="list" index="index" item="record" separator=",">
            (
            #{record.serverIp},
            #{record.command},
            #{record.result},
            #{record.executeUserId},
            #{record.executeUserEmail},
            #{record.executeUserName},
            #{record.executeDate}
            )
        </foreach>

    </insert>
    <select id="queryServerSSHInfoByUserIdAndServerIp" resultType="ServerSSHInfoDto">
        SELECT ssh_user,ssh_password,ssh_port FROM cloud_server WHERE server_ip = #{serverIp} and server_user =#{userId}
    </select>
    <update id="updateSSHInfo" parameterType="CloudServer">
        UPDATE
        cloud_server
        SET
        <trim suffixOverrides=",">
            ssh_user = #{sshUser},
            ssh_password = #{sshPassword},
            ssh_port = #{sshPort},
            <if test="serverDesc!=null and serverDesc!=''">
                server_desc=#{serverDesc}
            </if>
        </trim>
        <where>
            server_ip = #{serverIp} and server_user = #{serverUser}
        </where>
    </update>
    <select id="queryCountLinuxServerSSHByUserId" resultType="java.lang.Integer">
        SELECT COUNT(server_ip) FROM cloud_server WHERE server_user =#{userId} and server_os_type = 'Linux';
    </select>
    <select id="queryLinuxServerSSHByUserId" resultType="ServerSSHDto">
        SELECT server_ip,server_os_type,server_os_version,server_desc FROM cloud_server WHERE server_user = #{userId}
        and server_os_type='Linux'
        <if test="startItem!=null and limit!=null">limit #{startItem},#{limit};</if>
    </select>
    <select id="queryNetRuntimeRecord" resultMap="NetRecordGroupDto">
        SELECT record_time,net_name,rx_rate,tx_rate FROM cloud_net_info_now WHERE net_server_user = ${userId} AND net_server_ip = #{serverIp} AND record_time BETWEEN #{startTime} AND #{endTime}
    </select>
    <select id="queryMemRuntimeRecord" resultType="MemRecordDto">
        SELECT record_time,mem_used_percent,swap_used_percent FROM cloud_server_info_now WHERE server_user = #{userId} AND ip = #{serverIp} AND record_time BETWEEN #{startTime} AND #{endTime}
    </select>
    <select id="queryDiskRuntimeRecord" resultMap="diskRecordGroupDto">
        SELECT disk_name,record_time,read_rate,write_rate FROM cloud_disk_info_now WHERE disk_server_user = #{userId} AND disk_server_ip = #{serverIp} AND record_time BETWEEN #{startTime} AND #{endTime}
    </select>
    <select id="queryCpuRuntimeRecord" resultMap="cpuRecordGroupDto">
       SELECT cpu_id,record_time,user_used,system_used,combine FROM cloud_cpu_info_now WHERE cpu_server_user=#{userId} AND cpu_server_ip = #{serverIp} AND record_time BETWEEN #{startTime} AND #{endTime}
    </select>
    <select id="queryServerCount" resultType="java.lang.Integer">
        SELECT COUNT(*) as server_count FROM cloud_server
    </select>
    <select id="queryRegisteredServer" resultType="CloudServer">
        SELECT server_ip,server_user
        FROM cloud_server
    </select>
    <insert id="insertCloudServer" parameterType="CloudServer">
        INSERT INTO cloud_server
        <trim prefix="(" suffix=")" prefixOverrides=",">
            <if test="serverIp!=null and serverIp!=''">
                server_ip,
            </if>
            <if test="serverName!=null and serverName!=''">
                server_name,
            </if>
            <if test="serverOsType!=null and serverOsType!=''">
                server_os_type,
            </if>
            <if test="serverOsVersion!=null and serverOsVersion!=''">
                server_os_version,
            </if>
            <if test="isMonitor!=null">
                is_monitor,
            </if>
            <if test="serverUser!=null">
                server_user
            </if>
        </trim>
        VALUES
        <trim prefix="(" suffix=")" prefixOverrides=",">
            <if test="serverIp!=null and serverIp!=''">
                #{serverIp},
            </if>
            <if test="serverName!=null and serverName!=''">
                #{serverName},
            </if>
            <if test="serverOsType!=null and serverOsType!=''">
                #{serverOsType},
            </if>
            <if test="serverOsVersion!=null and serverOsVersion!=''">
                #{serverOsVersion},
            </if>
            <if test="isMonitor!=null">
                #{isMonitor},
            </if>
            <if test="serverUser!=null">
                #{serverUser}
            </if>
        </trim>
    </insert>
    <select id="queryServerByUserIdAndServerIp" resultType="CloudServerDto">
        SELECT
        server_ip,
        server_name,
        server_os_type,
        server_os_version,
        is_monitor
        FROM
        cloud_server
        <where>
            server_user=#{userId} and server_ip = #{serverIp}
        </where>
    </select>
    <select id="queryServerByUserId" resultType="CloudServerDto">
        SELECT
        server_ip,
        server_name ,
        server_os_type,
        server_os_version,
        is_monitor
        FROM
        cloud_server
        <where>
            server_user = #{userId}
        </where>
        limit #{startItem},#{limit}
    </select>

    <select id="queryCountOfServerByUserId" resultType="java.lang.Integer">
        SELECT
        count(server_ip)
        FROM
        cloud_server
        <where>
            server_user = #{userId}
        </where>
    </select>
    <select id="queryDetailOfServerByUserIdAndServerIp" resultMap="ServerDetailDto">
        SELECT
        s.computer_name,
        s.ip,
        s.os_name,
        s.os_version,
        s.os_arch,
        s.mem_total,
        s.swap_total,
        c.cpu_id,
        c.frequency,
        c.vendor,
        c.model,
        d.disk_name,
        d.disk_type,
        d.total,
        net.net_name,
        net.net_ip,
        net.net_mask
        FROM
        cloud_server_info_now s LEFT JOIN cloud_cpu_info_now c
                                     ON s.ip = c.cpu_server_ip and s.server_user = c.cpu_server_user and s.record_time = c.record_time
                                     LEFT JOIN cloud_disk_info_now d
                                     ON c.cpu_server_ip = d.disk_server_ip and c.cpu_server_user = d.disk_server_user and c.record_time = d.record_time
                                     LEFT JOIN cloud_net_info_now net
                                     ON d.disk_server_ip = net.net_server_ip and d.disk_server_user = net.net_server_user and d.record_time = net.record_time,
                                     (select (max(record_time)) as max_record_time from cloud_server_info_now cs where cs.server_user=#{userId} and cs.ip=#{serverIp}) mt
        WHERE s.ip = #{serverIp} and s.record_time = mt.max_record_time and s.server_user = #{userId};

    </select>
    <insert id="insertServerStateInfo" parameterType="ServerInfoDto">
        INSERT INTO cloud_server_info_now
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="computerName!=null and computerName!=''">
                computer_name,
            </if>
            <if test="userDomain!=null and userDomain!=''">
                user_domain,
            </if>
            <if test="ip!=null and ip!=''">
                ip,
            </if>
            <if test="osName!=null and osName!=''">
                os_name,
            </if>
            <if test="osArch!=null and osArch!=''">
                os_arch,
            </if>
            <if test="osVersion!=null and osVersion!=''">
                os_version,
            </if>
            <if test="memTotal!=null">
                mem_total,
            </if>
            <if test="memUsed!=null">
                mem_used,
            </if>
            <if test="memFree!=null">
                mem_free,
            </if>
            <if test="memUsedPercent!=null">
                mem_used_percent,
            </if>
            <if test="swapTotal!=null">
                swap_total,
            </if>
            <if test="swapFree!=null">
                swap_free,
            </if>
            <if test="swapUsedPercent!=null">
                swap_used_percent,
            </if>
            <if test="serverUser!=null">
                server_user,
            </if>
            <if test="recordTime!=null">
                record_time
            </if>
        </trim>
        VALUES
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="computerName!=null and computerName!=''">
                #{computerName},
            </if>
            <if test="userDomain!=null and userDomain!=''">
                #{userDomain},
            </if>
            <if test="ip!=null and ip!=''">
                #{ip},
            </if>
            <if test="osName!=null and osName!=''">
                #{osName},
            </if>
            <if test="osArch!=null and osArch!=''">
                #{osArch},
            </if>
            <if test="osVersion!=null and osVersion!=''">
                #{osVersion},
            </if>
            <if test="memTotal!=null">
                #{memTotal},
            </if>
            <if test="memUsed!=null">
                #{memUsed},
            </if>
            <if test="memFree!=null">
                #{memFree},
            </if>
            <if test="memUsedPercent!=null">
                #{memUsedPercent},
            </if>
            <if test="swapTotal!=null">
                #{swapTotal},
            </if>
            <if test="swapFree!=null">
                #{swapFree},
            </if>
            <if test="swapUsedPercent!=null">
                #{swapUsedPercent},
            </if>
            <if test="serverUser!=null">
                #{serverUser},
            </if>
            <if test="recordTime!=null">
                #{recordTime}
            </if>
        </trim>
    </insert>
    <insert id="insertCpuStateInfo" parameterType="CpuDto">
            INSERT INTO cloud_cpu_info_now(
                cpu_id,

                    cpu_server_ip,
                    cpu_server_user,
                    frequency,
                    vendor,
                    model,
                    user_used,
                    system_used,
                    combine,
                    idle,
                    record_time)
            VALUES
        <foreach collection ="list" item="cpu" index= "index" separator =",">
                (#{index},
                    #{cpu.cpuServerIp},
                    #{cpu.cpuServerUser},
                    #{cpu.frequency},
                    #{cpu.vendor},
                    #{cpu.model},
                    #{cpu.userUsed},
                    #{cpu.systemUsed},
                    #{cpu.combine},
                    #{cpu.idle},
                    #{cpu.recordTime})
        </foreach>
    </insert>
    <insert id="insertDiskStateInfo" parameterType="DiskDto" >
            INSERT INTO cloud_disk_info_now(
                    disk_server_ip,
                    disk_server_user,
                    disk_name,
                    disk_type,
                    total,
                    free,
                    avail,
                    used,
                    use_percent,
                    read_disk,
                    write_disk,
        read_rate,
        write_rate,
                    record_time)
            VALUES

        <foreach collection="list" index="index" item="disk"  separator =",">
                    (#{disk.diskServerIp},
                    #{disk.diskServerUser},
                    #{disk.diskName},
                    #{disk.diskType},
                    #{disk.total},
                    #{disk.free},
                    #{disk.avail},
                    #{disk.used},
                    #{disk.usePercent},
                    #{disk.readDisk},
                    #{disk.writeDisk},
            #{disk.readRate},
            #{disk.writeRate},
                    #{disk.recordTime})
        </foreach>
    </insert>
    <insert id="insertNetStateInfo" parameterType="NetDto">
            INSERT INTO cloud_net_info_now(
                    net_server_ip,
                    net_server_user,
                    net_name,
                    net_ip,
                    net_mask,
                    rx_packets,
                    tx_packets,
                    rx_bytes,
                    tx_bytes,
                    rx_errors,
                    tx_errors,
                    rx_dropped,
                    tx_dropped,
        rx_rate,
        tx_rate,
                    record_time)
            VALUES

        <foreach collection="list" item="net" index="index"  separator =",">
            (
            #{net.netServerIp},
            #{net.netServerUser},
            #{net.netName},
            #{net.netIp},
            #{net.netMask},
            #{net.rxPackets},
            #{net.txPackets},
            #{net.rxBytes},
            #{net.txBytes},
            #{net.rxErrors},
            #{net.txErrors},
            #{net.rxDropped},
            #{net.txDropped},
            #{net.rxRate},
            #{net.txRate},
            #{net.recordTime}
            )
        </foreach>
    </insert>

    <select id="queryServerIpByUserId" parameterType="java.lang.Integer" resultType="java.lang.String">
        SELECT server_ip FROM cloud_server WHERE server_user = #{userId}
    </select>
    <select id="queryLastRecordTimeByUserIdAndServerIp" resultType="java.lang.String">
        SELECT record_time FROM cloud_server_info_now
        WHERE server_user = #{userId} and ip=#{serverIp}
        ORDER BY record_time DESC
        LIMIT 1
    </select>
    <!--<insert id="insertComponent">
        INSERT INTO cloud_microservice
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="applicationName!=null and applicationName!=''">
                application_name,
            </if>
            <if test="applicationPassword!=null and applicationPassword!=''">
                application_password,
            </if>
            <if test="applicationJarName!=null and applicationJarName!=''">
                application_jar_name,
            </if>
            <if test="applicationLocation!=null and applicationLocation!=''">
                application_location,
            </if>
            <if test="applicationStarter!=null and applicationStarter!=''">
                application_starter,
            </if>
            <if test="applicationServerIp!=null and applicationServerIp!=''">
                application_server_ip,
            </if>
            <if test="applicationPort!=null and applicationPort!=''">
                application_port,
            </if>
            <if test="applicationDesc!=null and applicationDesc!=''">
                application_desc
            </if>
        </trim>
        VALUES
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="applicationName!=null and applicationName!=''">
                #{applicationName},
            </if>
            <if test="applicationPassword!=null and applicationPassword!=''">
                #{applicationPassword},
            </if>
            <if test="applicationJarName!=null and applicationJarName!=''">
                #{applicationJarName},
            </if>
            <if test="applicationLocation!=null and applicationLocation!=''">
                #{applicationLocation},
            </if>
            <if test="applicationStarter!=null and applicationStarter!=''">
                #{applicationStarter},
            </if>
            <if test="applicationServerIp!=null and applicationServerIp!=''">
                #{applicationServerIp},
            </if>
            <if test="applicationPort!=null and applicationPort!=''">
                #{applicationPort},
            </if>
            <if test="applicationDesc!=null and applicationDesc!=''">
                #{applicationDesc}
            </if>
        </trim>
    </insert>-->
</mapper>